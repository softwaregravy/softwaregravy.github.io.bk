<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Softwaregravy]]></title>
  <link href="http://softwaregravy.github.io/atom.xml" rel="self"/>
  <link href="http://softwaregravy.github.io/"/>
  <updated>2016-06-16T15:44:52-04:00</updated>
  <id>http://softwaregravy.github.io/</id>
  <author>
    <name><![CDATA[John Hinnegan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What to Interview For]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/06/16/what-to-interview-for/"/>
    <updated>2016-06-16T13:10:32-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/06/16/what-to-interview-for</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been helping some startups with their interviewing and recruiting lately.
I&rsquo;ve seen startups which have capable interviewers who lack bandwidth, which feel confident interviewing for some roles but not others, which have an illogical or inconsistent process, and some which have no real process at all.
In this post, I will discuss the different types of interviews for technical candidates, and suggest who to interview for what.</p>

<p>Caveat: I am describing what I consider typical interviews.
With effort, some startups have successfully re-invented technical interviews like, for example, having the candidate work for the company for a week.
(I remember reading about this company a while ago, but forget the name. Can anyone help with a source?)</p>

<ul>
<li><strong>Prescreen for Coding</strong> Becoming more and more common. Some sort of coding problem to be completed prior to speaking with anyone technical.</li>
<li><strong>Coding and Algorithms</strong> The most basic kind of technical interview asks you to code a solution so some problem. Solutions usually require algorithms or data structures commonly taught in 2nd or 3rd year of undergrad CS programs.</li>
<li><strong>Architecture</strong> Depending on the company&rsquo;s space, how do you build systems? As an example, in digital advertising I might focus on large scale systems, failure scenarios, and distributed counting problems. A games company might focus on graphics engines and AI.</li>
<li><strong>Team Leadership</strong> Covers sprint planning, software engineering best practices, testing practices, deployment strategies, and generally how to run a team well.</li>
<li><strong>People Management</strong> How do you manage people? I also often include hiring processes in here.</li>
<li><strong>Team Management</strong> This covers managing teams (e.g. having managers reporting into them). It would also include things like budgeting, company or division policies, and longer term prioritization.</li>
<li><strong>Communication</strong> How are they at communicating? Can they discuss technical topics with non-technical folks successfully?</li>
<li><strong>Product Management</strong> How do you define software deliverables which meat business needs?</li>
</ul>


<p>In general, you ask more senior people items further down the list. You also ask less of the basics.
Example: a Sr. Manager or Director likely knows how to code or at least did at some point.
They should ideally be able to pass your coding question, but if they will not be required to code in this role, then it might be okay to pass them with a mediocre result if they&rsquo;re strong in other areas.
For a mid-level software engineer, their coding is actually the most important component, so you should really focus on this and make sure they are strong in this area.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Job Title </th>
<th style="text-align:center;"> Prescreen </th>
<th style="text-align:center;"> Coding </th>
<th style="text-align:center;"> Architecture </th>
<th style="text-align:center;"> Leadership </th>
<th style="text-align:center;"> People Mgmt </th>
<th style="text-align:center;"> Team Mgmt </th>
<th style="text-align:center;"> Communication </th>
<th style="text-align:center;"> Product Management </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Jr. Software Engineer / College New Hire </td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Software Engineer </td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Sr. Software Engineer </td>
<td style="text-align:center;"></td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Team Lead</td>
<td style="text-align:center;"></td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;"></td>
<td style="text-align:center;"></td>
<td style="text-align:center;">1</td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Dev Manager</td>
<td style="text-align:center;"></td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;"></td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
</tr>
<tr>
<td style="text-align:center;">Director</td>
<td style="text-align:center;"></td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">1</td>
</tr>
</tbody>
</table>


<p><br></p>

<p>As you can see, I would spend much more time interviewing more senior people.
I also think it&rsquo;s usually okay if someone &ldquo;fails&rdquo; one of their interviews.
Unless they do spectacularly poorly, the other interviews should even out.
Another line of reasoning here is that you want them to grow into the role.
If they do amazing on all your interviews, then maybe they should be a level higher.
This makes sense since you generally want to be more sure of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Metrics]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/06/15/interview-metrics/"/>
    <updated>2016-06-15T13:30:22-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/06/15/interview-metrics</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Does a CTO Do?]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/06/14/what-does-a-cto-do/"/>
    <updated>2016-06-14T15:18:09-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/06/14/what-does-a-cto-do</id>
    <content type="html"><![CDATA[<p>For many people who look at the CTO role at a startup from afar, it may not seem like there&rsquo;s that much to it beyond the purely technical.
However, to be successful, there the role requires so much more than purely technical talent.</p>

<p>Sure, the CTO should be a strong coder, he should set a technical vision for the organization, he must manage engineers who report to him,
and he must communicate clearly to both his employees and &ldquo;the business&rdquo;.
This is just the tip of the iceberg.
Most of the other skills and areas of expertise I&rsquo;ll list below are learnable and can be developed with experience.
Most of them are also taken for granted by non-technical folks when present and are only noticed as needed skillsets when absent.</p>

<p>First off, what are the obvious skillsets needed? Those which should be hard requirements and are difficult or otherwise uneconomical to teach.</p>

<ul>
<li>Coding. Pure and simple, the CTO needs a strong technical background. They should also be a productivity workhorse, able to deliver the throughput of 3 engineers.</li>
<li>Architecture. Beyond building early prototypes, the CTO must be able to lead the team to build things which fit together and scale with the company.</li>
<li>Communication. The CTO must be able to work with the business when capturing requirements and communicate them clearly to his team.</li>
<li>Management. The CTO will have a team reporting to him, and so much understand people management. As it grows, he must also engage in annual reviews or other feedback processes.</li>
</ul>


<p>So, what areas of expertise does a CTO need beyond the obvious?</p>

<ul>
<li>Recruiting and Interviewing. Most startups need to grow the technical team. Few startups have dedicated HR professionals to help, so this often falls to the CTO.
Even with support, it will be the CTO&rsquo;s responsibility to interview candidates and often they must also make and close offers.</li>
<li>On-boarding, Knowledge Capture/Transfer. Once hired, the CTO must train other engineers.
Even experienced hires will need some training on practices, policies, and how to work with the code.
Few startups have any real plans to ramp up engineers or to capture knowledge in any medium other than engineers' heads.</li>
<li>Sprint Planning and Prioritization. The CTO needs to be able to plan work for others.
At the core, he&rsquo;s responsible for everything technical which is delivered and must ensure his team is working on the right things.</li>
<li>Product Management. Often the CTO wears this hat. Sometimes there is a cofounder or early hire which handles this, but very often it is the CTO.
Even if the CEO is the &ldquo;product manager&rdquo;, it may actually be the CTO making most of the smaller decisions.
Making the right decisions in a timely manner is an important skill.</li>
<li>Quality Control and Best Practices. The CTO must know how to build the checks along the way to minimize bugs and create a high quality code base.
When you hear of companies needing to do a full rewrite on a product (which is not a prototype), it&rsquo;s likely because their quality control failed.</li>
<li>Infrastructure Planning and Scaling. As a company grows, the infrastructure bill is going to grow.
Eventually someone notices and the CTO must take responsibility for managing the costs.
This requires evaluating how much things are costing, planning future infrastructure needs, negotiating with vendors, and prioritizing cost-saving work.
Closely related is how the system scales and recovers from infrastructure failure.</li>
<li>Monitoring, Alarming, and Metrics. A production system is like a living thing.
There is constant barrage of requests either from clients.
Keeping track of what&rsquo;s going on, identifying when a problem arises, and being notified of said problem in a timely and appropriate manner requires vision, planning, and policies.</li>
<li>Operations and Bug Tracking. With a system in production comes a constant stream of bugs (major and minor), small tweaks, routine deployments, routine fixes, latency spikes, rounding errors, etc., etc.
Collectively called operations, it requires a dedicated skillset to manage in a sustainable fashion which does not impact product deliveries.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tickwork Powered by AWS]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/05/20/tickwork-powered-by-aws/"/>
    <updated>2016-05-20T16:12:46-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/05/20/tickwork-powered-by-aws</id>
    <content type="html"><![CDATA[<p><a href="http://softwaregravy.com/blog/2016/05/20/introducing-tickwork/">My previous post</a> introduced <a href="https://github.com/softwaregravy/tickwork">Tickwork</a> which performs scheduling in Ruby, but doesn&rsquo;t contain a clock.
The intentionally missing component of the scheduling library means that something must regularly call the manager to drive the scheduling of events.</p>

<p>AWS recently introduced <a href="https://aws.amazon.com/blogs/aws/new-cloudwatch-events-track-and-respond-to-changes-to-your-aws-resources/">Cloudwatch Events</a> &ndash; essentially a cron in the cloud that does nothing on it&rsquo;s own.
We can use this to power Tickwork.</p>

<p>The way we can do this is by having Cloudwatch Events push to <a href="https://aws.amazon.com/sns/">SNS</a>, which we&rsquo;ll then call out to our Rails app with an HTTP post.
How much does this cost? $0. Cloudwatch Events are free (as far as I can tell), and we are comfortably in the free tier for SNS. (100,000 HTTP calls per month are free, then just $0.60/1 million after that. <a href="https://aws.amazon.com/sns/">source</a>)</p>

<p>To make this easy, I&rsquo;ve created <a href="https://github.com/softwaregravy/aws_tickwork">AWS Tickwork</a>, an engine for Rails.
The main part of AWS Tickwork is an SNS controller which makes receiving posts very easy.
This controller simply calls Tickwork.  The engine also contains an optional migration to use ActiveRecord as the datastore required by Tickwork.</p>

<p>A full app example using AWS Tickwork can be found in the <a href="https://github.com/softwaregravy/aws_tickwork/tree/master/spec/dummy">spec directory</a>.
I&rsquo;m also using this engine successfully in another project &hellip; maybe a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Tickwork]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/05/20/introducing-tickwork/"/>
    <updated>2016-05-20T07:02:42-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/05/20/introducing-tickwork</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/softwaregravy/tickwork">Tickwork</a> is a Ruby library which supports scheduling of jobs.
It is essentially a fork of <a href="https://github.com/tomykaira/clockwork">clockwork</a>, but has been significantly simplified.
The simplification comes mainly from the removal of the self-driving time engine.
That is to say, tickwork requires external calls to move through time.</p>

<p>Why would you possibly want a scheduling library which can&rsquo;t execute it&rsquo;s own schedule?
The typical way to run an application relying on clockwork is to have a process dedicated to running the schedule.
This process basically just spins in a loop checking for work that needs to be done.
There are a couple of drawbacks to this approach:</p>

<ol>
<li>It requires a separate process. On platforms like Heroku, that involves running an extra dyno (i.e. $$).</li>
<li>It is vulnerable to missing jobs during restarts, deploys, or other failures. We had this problem at my old company, Thinknear.
We scheduled critical jobs to run in the top half of the hour and would deploy in the bottom half of the hour, just to try and avoid missing a job.
If a job is missed, there&rsquo;s no built in way to catch up.</li>
</ol>


<p>Tickwork, on the other hand, does not require a separate process (though you may still choose to use one).
Tickwork only moves through time (scheduling jobs) when told to do so.
As a result, it is not vulnerable to missing work due to restarts, long running jobs, or other externalities.
It uses an &ldquo;at least once&rdquo; approach vs. clockwork&rsquo;s &ldquo;at most once&rdquo;.
If a tickwork run is interrupted, say, due to a deployment, it never records finishing and so will re-run that period of time on its next invocation.</p>

<p>This robustness does come at a cost.
Unlike clockwork, tickwork requires a datastore.
It requires only a small omount of data, just one master timestamp and one timestamp per recurring job.
Tickwork is compatible with <a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html">ActiveSupport::Cache::Store</a>,
the only caveat being that it must be a shared cache across all application hosts.
Creating a database table would also be trivial (coming in future blog post).</p>

<p>As a last note, clockwork supported dynamic scheduling of jobs via the database.
This feature no longer exists in tickwork.</p>
]]></content>
  </entry>
  
</feed>
