<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby, | Softwaregravy]]></title>
  <link href="http://softwaregravy.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://softwaregravy.github.io/"/>
  <updated>2016-05-20T16:34:17-04:00</updated>
  <id>http://softwaregravy.github.io/</id>
  <author>
    <name><![CDATA[John Hinnegan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tickwork Powered by AWS]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/05/20/tickwork-powered-by-aws/"/>
    <updated>2016-05-20T16:12:46-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/05/20/tickwork-powered-by-aws</id>
    <content type="html"><![CDATA[<p><a href="http://softwaregravy.com/blog/2016/05/20/introducing-tickwork/">My previous post</a> introduced <a href="https://github.com/softwaregravy/tickwork">Tickwork</a> which performs scheduling in Ruby, but doesn&rsquo;t contain a clock.
The intentionally missing component of the scheduling library means that something must regularly call the manager to drive the scheduling of events.</p>

<p>AWS recently introduced <a href="https://aws.amazon.com/blogs/aws/new-cloudwatch-events-track-and-respond-to-changes-to-your-aws-resources/">Cloudwatch Events</a> &ndash; essentially a cron in the cloud that does nothing on it&rsquo;s own.
We can use this to power Tickwork.</p>

<p>The way we can do this is by having Cloudwatch Events push to <a href="https://aws.amazon.com/sns/">SNS</a>, which we&rsquo;ll then call out to our Rails app with an HTTP post.
How much does this cost? $0. Cloudwatch Events are free (as far as I can tell), and we are comfortably in the free tier for SNS. (100,000 HTTP calls per month are free, then just $0.60/1 million after that. <a href="https://aws.amazon.com/sns/">source</a>)</p>

<p>To make this easy, I&rsquo;ve created <a href="https://github.com/softwaregravy/aws_tickwork">AWS Tickwork</a>, an engine for Rails.
The main part of AWS Tickwork is an SNS controller which makes receiving posts very easy.
This controller simply calls Tickwork.  The engine also contains an optional migration to use ActiveRecord as the datastore required by Tickwork.</p>

<p>A full app example using AWS Tickwork can be found in the <a href="https://github.com/softwaregravy/aws_tickwork/tree/master/spec/dummy">spec directory</a>.
I&rsquo;m also using this engine successfully in another project &hellip; maybe a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Tickwork]]></title>
    <link href="http://softwaregravy.github.io/blog/2016/05/20/introducing-tickwork/"/>
    <updated>2016-05-20T07:02:42-04:00</updated>
    <id>http://softwaregravy.github.io/blog/2016/05/20/introducing-tickwork</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/softwaregravy/tickwork">Tickwork</a> is a Ruby library which supports scheduling of jobs.
It is essentially a fork of <a href="https://github.com/tomykaira/clockwork">clockwork</a>, but has been significantly simplified.
The simplification comes mainly from the removal of the self-driving time engine.
That is to say, tickwork requires external calls to move through time.</p>

<p>Why would you possibly want a scheduling library which can&rsquo;t execute it&rsquo;s own schedule?
The typical way to run an application relying on clockwork is to have a process dedicated to running the schedule.
This process basically just spins in a loop checking for work that needs to be done.
There are a couple of drawbacks to this approach:</p>

<ol>
<li>It requires a separate process. On platforms like Heroku, that involves running an extra dyno (i.e. $$).</li>
<li>It is vulnerable to missing jobs during restarts, deploys, or other failures. We had this problem at my old company, Thinknear.
We scheduled critical jobs to run in the top half of the hour and would deploy in the bottom half of the hour, just to try and avoid missing a job.
If a job is missed, there&rsquo;s no built in way to catch up.</li>
</ol>


<p>Tickwork, on the other hand, does not require a separate process (though you may still choose to use one).
Tickwork only moves through time (scheduling jobs) when told to do so.
As a result, it is not vulnerable to missing work due to restarts, long running jobs, or other externalities.
It uses an &ldquo;at least once&rdquo; approach vs. clockwork&rsquo;s &ldquo;at most once&rdquo;.
If a tickwork run is interrupted, say, due to a deployment, it never records finishing and so will re-run that period of time on its next invocation.</p>

<p>This robustness does come at a cost.
Unlike clockwork, tickwork requires a datastore.
It requires only a small omount of data, just one master timestamp and one timestamp per recurring job.
Tickwork is compatible with <a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html">ActiveSupport::Cache::Store</a>,
the only caveat being that it must be a shared cache across all application hosts.
Creating a database table would also be trivial (coming in future blog post).</p>

<p>As a last note, clockwork supported dynamic scheduling of jobs via the database.
This feature no longer exists in tickwork.</p>
]]></content>
  </entry>
  
</feed>
